<?php

namespace App\Http\Controllers;

use App\Events\ProductAddedToCart;
use App\Services\UserInterestProfileUpdater;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Cart;
use App\Models\Product;
use Illuminate\Support\Facades\DB;

class CartController extends Controller
{
    // Kos√°r megtekint√©se
    public function index()
    {
        $userId = auth()->id();
        $cartItems = Cart::with('product')->where('user_id', $userId)->get();
        $productIds = $cartItems->pluck('product_id')->toArray();
        $totalPrice = $cartItems->sum(function ($item) {
            return $item->product->price * $item->quantity;
        });

        $recommendedProducts = collect();

        if ($cartItems->isNotEmpty()) {
            $originalCategories = $cartItems->pluck('product.category')->unique()->toArray();

            // Random term√©kek lek√©r√©se, kiz√°rva a kos√°rban l√©v≈ë kateg√≥ri√°kat √©s term√©keket
            $candidates = Product::whereNotIn('id', $productIds)
                ->whereNotIn('category', $originalCategories)
                ->inRandomOrder()
                ->limit(100)
                ->get();

            // Csoportos√≠tjuk kateg√≥ri√°k szerint
            $groupedByCategory = $candidates->groupBy('category');

            foreach ($groupedByCategory as $productsInCategory) {
                if ($productsInCategory->isNotEmpty()) {
                    $recommendedProducts->push($productsInCategory->random());
                }
            }

            // üî• Ha m√©g nincs 4 aj√°nl√°s, eg√©sz√≠ts√ºk ki random term√©kekkel
            if ($recommendedProducts->count() < 4) {
                $missing = 4 - $recommendedProducts->count();

                $additionalProducts = Product::whereNotIn('id', array_merge(
                    $productIds,
                    $recommendedProducts->pluck('id')->toArray()
                ))
                    ->whereNotIn('category', $originalCategories)
                    ->inRandomOrder()
                    ->limit($missing)
                    ->get();

                $recommendedProducts = $recommendedProducts->merge($additionalProducts);
            }

            // Max 4 biztosan
            $recommendedProducts = $recommendedProducts->take(4);
        }

        return view('cart.mycart', compact('cartItems', 'recommendedProducts', 'totalPrice'));
    }





    // Term√©k hozz√°ad√°sa a kos√°rhoz
    public function addToCart(Request $request)
    {
        $userId = auth()->id();
        if (!$userId) {
            return redirect()->route('login')->with('error', 'Be kell jelentkezned a v√°s√°rl√°shoz!');
        }

        // Valid√°ci√≥
        $request->validate([
            'product_id' => 'required|exists:products,id',
            'quantity' => 'required|integer|min:1|max:50',
            'size' => 'required|string',
        ]);

        $product = Product::find($request->product_id);

        // Ha valami√©rt m√©g mindig nem l√©tezne a term√©k (b√°r az exists miatt ez ritka)
        if (!$product) {
            return redirect()->route('cart.mycart')->with('error', 'A term√©k nem tal√°lhat√≥!');
        }

        // Kos√°r adatainak ellen≈ërz√©se az adatb√°zisban
        $cartItem = Cart::where('user_id', $userId)
            ->where('product_id', $request->product_id)
            ->first();

        if ($cartItem) {
            // Ha m√°r l√©tezik a term√©k a kos√°rban, akkor friss√≠tj√ºk a mennyis√©get
            $cartItem->quantity += $request->quantity;
            $cartItem->save();
        } else {
            // Ha m√©g nem l√©tezik a term√©k a kos√°rban, hozz√°adjuk
            Cart::create([
                'user_id' => $userId,
                'product_id' => $request->product_id,
                'quantity' => $request->quantity,
            ]);
        }

        // A m√©retet csak a session-ben t√°roljuk
        session(['size_' . $request->product_id => $request->size]);

        ProductAddedToCart::dispatch(auth()->id());

        return redirect()->route('cart.mycart')->with('success', 'A term√©k sikeresen hozz√°adva a kos√°rhoz!');
    }


    // Mennyis√©g friss√≠t√©se
    public function updateCart(Request $request, Cart $cart)
    {
        $request->validate([
            'quantity' => 'required|integer|min:1',
        ]);

        if ($cart->user_id !== Auth::id()) {
            abort(403);
        }

        $cart->update(['quantity' => $request->quantity]);

        return redirect()->route('cart.mycart')->with('success', 'Cart updated!');
    }


    // Term√©k elt√°vol√≠t√°sa
    public function removeFromCart(Cart $cart)
    {
        if ($cart->user_id !== Auth::id()) {
            abort(403);
        }

        $cart->delete();

        // üîÅ Profil √∫jrasz√°mol√°sa, imm√°r a t√∂r√∂lt term√©k n√©lk√ºl
        app(UserInterestProfileUpdater::class)->update(Auth::id());

        return redirect()->route('cart.mycart')->with('success', 'Item removed from cart!');
    }


    public function cleanupOldCarts()
    {
        // T√∂rli azokat a kos√°rt√©teleket, amelyek 1 napn√°l r√©gebbiek
        $deletedRows = Cart::where('created_at', '<', Carbon::now()->subDay())->delete();
        return $deletedRows;
    }

}
