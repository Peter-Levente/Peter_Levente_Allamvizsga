<?php

namespace App\Http\Controllers;

use App\Events\ProductViewed;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

// Term√©kek megjelen√≠t√©s√©√©rt, keres√©s√©√©rt, aj√°nl√°s√°√©rt √©s r√©szletez√©s√©√©rt felel≈ës kontroller
class ProductController extends Controller
{
    /**
     * √ñsszes term√©k list√°z√°sa, sz≈±r√©s, rendez√©s √©s szem√©lyre szabott aj√°nl√°s
     *
     * @param Request $request
     * @return \Illuminate\View\View
     */
    public function index(Request $request)
    {
        // üîç Keres√©s √©s rendez√©s be√°ll√≠t√°sa
        $query = Product::query();

        // N√©v szerinti keres√©s
        if ($request->filled('search')) {
            $query->where('name', 'ilike', '%' . $request->search . '%');
        }

        // Rendez√©s kiv√°laszt√°sa (√°r vagy n√©v szerint)
        if ($request->filled('sort')) {
            switch ($request->sort) {
                case 'price_asc':
                    $query->orderBy('price', 'asc');
                    break;
                case 'price_desc':
                    $query->orderBy('price', 'desc');
                    break;
                case 'name_asc':
                    $query->orderBy('name', 'asc');
                    break;
                case 'name_desc':
                    $query->orderBy('name', 'desc');
                    break;
            }
        }

        // Lek√©rdezz√ºk a term√©keket
        $products = $query->get();

        // üîÅ Aj√°nlott term√©kek el≈ëk√©sz√≠t√©se
        $recommendedProducts = collect();

        // Csak bejelentkezett felhaszn√°l√≥nak sz√°molunk aj√°nl√°st
        if (auth()->check()) {
            $userId = auth()->id();

            // Az adott felhaszn√°l√≥ embedding vektor√°t lek√©rj√ºk
            $userEmbedding = DB::connection('pgsql')->table('user_interest_profiles')
                ->where('user_id', $userId)
                ->value('embedding');

            if ($userEmbedding) {
                // Hasonl√≥ term√©kek keres√©se a felhaszn√°l√≥i embedding alapj√°n
                // A <-> kisz√°m√≠tja a hasonl√≥s√°got az adatb√°zisban t√°rolt embedding √©s a megadott $userEmbedding vektor k√∂z√∂tt.
                // ?::vector ‚Üí a lek√©rdez√©s param√©ter√©t (a felhaszn√°l√≥ embeddingj√©t) explicit vector t√≠pusra konvert√°lja.
                $similarRows = DB::connection('pgsql')->select("
                    SELECT product_id, embedding <-> ?::vector as distance
                    FROM product_embeddings
                    ORDER BY embedding <-> ?::vector
                ", [$userEmbedding, $userEmbedding]);

                $ids = array_map(fn($row) => $row->product_id, $similarRows);
                $distances = collect($similarRows)->pluck('distance', 'product_id')->toArray();

                // Lek√©rj√ºk az aj√°nlott term√©keket √©s hozz√°rendelj√ºk a t√°vols√°gokat
                $recommendedProducts = Product::whereIn('id', $ids)->get();
                $recommendedProducts = $recommendedProducts->map(function ($item) use ($distances) {
                    $item->distance = $distances[$item->id] ?? null;
                    return $item;
                })->sortBy('distance')->take(10)->values();
            }
        }

        return view('index', compact('products', 'recommendedProducts'));
    }

    /**
     * Egy konkr√©t term√©k r√©szleteinek megjelen√≠t√©se, hasonl√≥ term√©kekkel
     *
     * @param int $id A term√©k azonos√≠t√≥ja
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        // Megtekint√©s esem√©ny r√∂gz√≠t√©se (aj√°nl√≥rendszer sz√°m√°ra)
        if (auth()->check()) {
            ProductViewed::dispatch(auth()->id(), $id);
        }

        $product = Product::findOrFail($id);

        // Az aktu√°lis term√©k embeddingj√©nek lek√©rdez√©se
        $embeddingRow = DB::connection('pgsql')
            ->table('product_embeddings')
            ->where('product_id', $product->id)
            ->first();

        $similarProducts = collect();

        if ($embeddingRow) {
            // Legk√∂zelebbi term√©kek keres√©se az embedding t√©rben (10 db)
            // A <-> kisz√°m√≠tja a hasonl√≥s√°got az adatb√°zisban t√°rolt embedding √©s a megadott $userEmbedding vektor k√∂z√∂tt.
            // ?::vector ‚Üí a lek√©rdez√©s param√©ter√©t (a felhaszn√°l√≥ embeddingj√©t) explicit vector t√≠pusra konvert√°lja.
            $similarRows = DB::connection('pgsql')->select("
                SELECT pe.product_id, pe.embedding <-> ?::vector as distance
                FROM product_embeddings pe
                WHERE pe.product_id != ?
                ORDER BY distance
                LIMIT 10
            ", [$embeddingRow->embedding, $product->id]);

            $ids = array_map(fn($item) => $item->product_id, $similarRows);

            $distances = [];
            foreach ($similarRows as $row) {
                $distances[$row->product_id] = $row->distance;
            }

            // Term√©kek lek√©r√©se √©s a t√°vols√°gok hozz√°rendel√©se
            $similarProducts = Product::whereIn('id', $ids)->get();
            $similarProducts = $similarProducts->map(function ($item) use ($distances) {
                $item->distance = $distances[$item->id] ?? null;
                return $item;
            })->sortBy('distance')->values(); // N√∂vekv≈ë sorrendben (legjobban hasonl√≥k el√∂l)
        }

        return view('products.details', compact('product', 'similarProducts'));
    }

    /**
     * Term√©kek megjelen√≠t√©se adott kateg√≥ria alapj√°n, keres√©ssel √©s rendez√©ssel
     *
     * @param Request $request
     * @param string $category
     * @return \Illuminate\View\View|\Illuminate\Http\RedirectResponse
     */
    public function showcategory(Request $request, $category)
    {
        // Lek√©rj√ºk a kateg√≥ria term√©keit
        $products = Product::where('category', $category)->get();

        // Ha nincs ilyen kateg√≥ri√°j√∫ term√©k, visszair√°ny√≠tjuk a f≈ëoldalra
        if ($products->isEmpty()) {
            return redirect()->route('products.index')->with('error', 'No products found in this category.');
        }

        // √öj lek√©rdez√©s sz≈±r√©shez √©s rendez√©shez
        $query = Product::where('category', $category);

        if ($request->filled('search')) {
            $query->where('name', 'like', '%' . $request->search . '%');
        }

        if ($request->filled('sort')) {
            switch ($request->sort) {
                case 'price_asc':
                    $query->orderBy('price', 'asc');
                    break;
                case 'price_desc':
                    $query->orderBy('price', 'desc');
                    break;
                case 'name_asc':
                    $query->orderBy('name', 'asc');
                    break;
                case 'name_desc':
                    $query->orderBy('name', 'desc');
                    break;
            }
        }

        // Sz≈±rt/rendezett term√©kek
        $products = $query->get();

        return view('products.category', compact('products', 'category'));
    }
}
